// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PaymentRequest struct {
	PaymentRequest       string   `protobuf:"bytes,1,opt,name=paymentRequest,proto3" json:"paymentRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentRequest) Reset()         { *m = PaymentRequest{} }
func (m *PaymentRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentRequest) ProtoMessage()    {}
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *PaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentRequest.Unmarshal(m, b)
}
func (m *PaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentRequest.Marshal(b, m, deterministic)
}
func (m *PaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRequest.Merge(m, src)
}
func (m *PaymentRequest) XXX_Size() int {
	return xxx_messageInfo_PaymentRequest.Size(m)
}
func (m *PaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRequest proto.InternalMessageInfo

func (m *PaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

type StreamPaymentRequest struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamPaymentRequest) Reset()         { *m = StreamPaymentRequest{} }
func (m *StreamPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*StreamPaymentRequest) ProtoMessage()    {}
func (*StreamPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *StreamPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamPaymentRequest.Unmarshal(m, b)
}
func (m *StreamPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamPaymentRequest.Marshal(b, m, deterministic)
}
func (m *StreamPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPaymentRequest.Merge(m, src)
}
func (m *StreamPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_StreamPaymentRequest.Size(m)
}
func (m *StreamPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPaymentRequest proto.InternalMessageInfo

func (m *StreamPaymentRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func init() {
	proto.RegisterType((*PaymentRequest)(nil), "PaymentRequest")
	proto.RegisterType((*StreamPaymentRequest)(nil), "StreamPaymentRequest")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe0, 0xe2, 0x0b, 0x48, 0xac, 0xcc, 0x4d, 0xcd, 0x2b,
	0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe3, 0xe2, 0x2b, 0x40, 0x11, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x13, 0x55, 0x32, 0xe2, 0x12, 0x09, 0x2e, 0x29, 0x4a, 0x4d,
	0xcc, 0x45, 0xd3, 0x2f, 0xc5, 0xc5, 0x91, 0x9c, 0x93, 0x99, 0x9a, 0x57, 0xe2, 0xe9, 0x02, 0xd5,
	0x09, 0xe7, 0x1b, 0xf9, 0x72, 0x71, 0x40, 0x55, 0x17, 0x0b, 0x39, 0x72, 0x89, 0x62, 0xd3, 0x5f,
	0x2c, 0x24, 0xaa, 0x87, 0x4d, 0x5c, 0x8a, 0x5f, 0x0f, 0x55, 0xc0, 0x80, 0x31, 0x89, 0x0d, 0xec,
	0x07, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xcf, 0x7f, 0xc7, 0xd0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentsClient is the client API for Payments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentsClient interface {
	//*
	//A uni-directional stream of Lightning Network
	//payment requests from the server to the client .
	StreamPaymentRequests(ctx context.Context, in *StreamPaymentRequest, opts ...grpc.CallOption) (Payments_StreamPaymentRequestsClient, error)
}

type paymentsClient struct {
	cc *grpc.ClientConn
}

func NewPaymentsClient(cc *grpc.ClientConn) PaymentsClient {
	return &paymentsClient{cc}
}

func (c *paymentsClient) StreamPaymentRequests(ctx context.Context, in *StreamPaymentRequest, opts ...grpc.CallOption) (Payments_StreamPaymentRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Payments_serviceDesc.Streams[0], "/Payments/StreamPaymentRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentsStreamPaymentRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Payments_StreamPaymentRequestsClient interface {
	Recv() (*PaymentRequest, error)
	grpc.ClientStream
}

type paymentsStreamPaymentRequestsClient struct {
	grpc.ClientStream
}

func (x *paymentsStreamPaymentRequestsClient) Recv() (*PaymentRequest, error) {
	m := new(PaymentRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaymentsServer is the server API for Payments service.
type PaymentsServer interface {
	//*
	//A uni-directional stream of Lightning Network
	//payment requests from the server to the client .
	StreamPaymentRequests(*StreamPaymentRequest, Payments_StreamPaymentRequestsServer) error
}

func RegisterPaymentsServer(s *grpc.Server, srv PaymentsServer) {
	s.RegisterService(&_Payments_serviceDesc, srv)
}

func _Payments_StreamPaymentRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaymentsServer).StreamPaymentRequests(m, &paymentsStreamPaymentRequestsServer{stream})
}

type Payments_StreamPaymentRequestsServer interface {
	Send(*PaymentRequest) error
	grpc.ServerStream
}

type paymentsStreamPaymentRequestsServer struct {
	grpc.ServerStream
}

func (x *paymentsStreamPaymentRequestsServer) Send(m *PaymentRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _Payments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Payments",
	HandlerType: (*PaymentsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPaymentRequests",
			Handler:       _Payments_StreamPaymentRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
